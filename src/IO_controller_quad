#!/usr/bin/env python

# 
#      ____  ___   _____ ______   __          __    
#     / __ \/   | / ___// ____/  / /   ____ _/ /_   
#    / / / / /| | \__ \/ /      / /   / __ `/ __ \  
#   / /_/ / ___ |___/ / /___   / /___/ /_/ / /_/ /  
#  /_____/_/  |_/____/\____/  /_____/\__,_/_.___/   
#                                                   
# 
# author: james usevitch
# 
# Description: This file contains the input/output linearization controller for the
#              Hector Quadrotor model in Gazebo. Obstacle avoidance and input constraint satisfaction
#              is calculated using a control barrier function and QP method.
# 


import rospy
import sys
import osqp
import numpy as np
from numpy import cos, sin, arccos, arctan2
from scipy.sparse import csc_matrix
import tf.transformations as trans # For quaternion operations
import argparse
from copy import deepcopy

import trajectory

# Import messages
from geometry_msgs.msg import Twist
from gazebo_msgs.msg import ModelStates
from geometry_msgs.msg import Quaternion
from hector_uav_msgs.srv import EnableMotors, EnableMotorsResponse



## Publishers



## Variables setup

state = np.zeros(3)

local_offset = np.array([0,0,0])

# Agent controller parameters
# Gain tuning may be needed
kp = 5
kd = 1
delta = 1 # Parameter for class-K function in QP

# Objective function weights
P = csc_matrix(np.identity(3)) 

# Hz for how often input callback is called
input_Hz = 10

# Input constraints
umax = 1;

# Infinity norm bounds
Au = np.array([[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]])
bu = np.array([umax, umax, umax, umax, umax, umax])


# Trajectory setup
t0 = np.inf # Initial time

trajectory_type = "circular3D" # Types can be None, circular, square, polynomial

traj_func = {
    "circular2D": trajectory.circular2D,
    "circular3D": trajectory.circular3D
}


vel_msg = Twist()
objectStates = ModelStates()
patterns = ['rover', 'quad','obstacle']




## Main function

def quad_qp_control():
    
    rospy.init_node('quad_qp_control')

    # Subscribers

    rospy.Subscriber("/gazebo/model_states", ModelStates, object_callback)
    rospy.Timer(rospy.Duration(1.0/input_Hz), IOcallback)

    rospy.spin()


## Helper functions

def IOcallback(msg):
     
    # Current time

    # Change this later to remove global and  take t0 from leader nodes
    global t0
    if t0 is np.inf:
        t0 = rospy.get_rostime()

    rosTime = rospy.get_rostime()
    if t0 is not np.inf:
        if (t0 <= rosTime):
            temp = rosTime - t0
            t = temp.to_sec() # + 1e-9*temp.to_nsec()
        else:
            t = 0.0
    else:
        t = 0.0
        # print("\nt0 is: " + str(t0))

    # print("\nt is: ")
    # print(t)


    # Object states
    currentObjectStates = deepcopy(objectStates)
    
    # Debug
    # print("\n the currentObjectStates is:")
    # print(currentObjectStates)
    # print("\n")
    # /Debug

    if (quad_namespace in currentObjectStates.name):
        state_index = currentObjectStates.name.index(quad_namespace) # Gets the index of agent state info
        state[0] = currentObjectStates.pose[state_index].position.x
        state[1] = currentObjectStates.pose[state_index].position.y
        state[2] = currentObjectStates.pose[state_index].position.z



        # Find the indices for all rovers, quads, and objects specifically labeled "obstacle"
        # The array 'patterns' is defined above in the global scope
        reduced_indices = [currentObjectStates.name.index(s) for s in currentObjectStates.name if any(xs in s for xs in patterns)]
        
        # Remove the index for this agent's own information
        if state_index in reduced_indices:
            reduced_indices.remove(state_index)

        # Solve for center of formation and formation frame state
        if trajectory_type is not None:
            formation_state, deriv_formation_state = traj_func[trajectory_type](t,c=(0,0,5), R=5, w=0.07)
            
            # Determine local target point and derivative as offset from the formational center
            # TODO: This assumes that the formation frame's xy plane is always parallel to global
            #       xy frame. This may need to be changed later.
            if np.any(local_offset != np.array([0.0, 0.0, 0.0])):
                p, dp = formation_offset(formation_state, deriv_formation_state, local_offset)
            else:
                p = formation_state[0:3]
                dp = deriv_formation_state[0:3]
        else:
            p = state
            dp = np.zeros(3)

        print("\np and dp:")
        print(str(p) + ", " + str(dp))
        print("\nCurrent state:")
        print(state)
        print("\nError:")
        print(state - p[0:3])

        # print("\np minus formation_state for agent {0}:".format(quad_namespace))
        # print(p - formation_state[0:3])

        uhat = nominal_ctrl(state, p, dp)
        # print("\nuhat untransformed:")
        # print(uhat)
        
        # Minimally modify nominal controller with CBF QP
        # TODO: This currently assumes everything has the same safety radius.
        #       Need to create a parameter server which lists the safety radii of all nodes.
        # OSQP assumes the form (1/2)u^T P u + q^T u
        R = 1.0
        Ro = 1.0


        # # print("\nreduced_indices:")
        # # print(reduced_indices)

        if len(reduced_indices) > 0:
            A = np.zeros((len(reduced_indices),3))
            bvec = np.zeros(len(reduced_indices))

            for i in range(len(reduced_indices)):
                idx = reduced_indices[i]
                obstacle_state = np.array([currentObjectStates.pose[idx].position.x, currentObjectStates.pose[idx].position.y, currentObjectStates.pose[idx].position.z])

                A[i,:] = -1.0*dhdx(state,obstacle_state)
                bvec[i] = delta*h(state,obstacle_state,R,Ro)

            # Add the infinity norm input constraints
            # A = np.append(A,Au,axis=0) # for untransformed inputs
            A = np.append(A,Au,axis=0) # for untransformed inputs
            bvec = np.append(bvec,bu,axis=0)
        else:
            A = Au
            bvec = bu


        # If the nominal controller is feasible, skip the QP.
        if (np.max(A.dot(uhat) - bvec) <= 0.0):
            u = uhat
        else:
            q = -uhat
            model = osqp.OSQP()
            model.setup(P=P, q=q, A=csc_matrix(A), u=bvec, verbose=False)
              
            results = model.solve()

            # Set u equal to results if the problem was solved; otherwise set it to zero
            # See https://osqp.org/docs/interfaces/status_values.html#status-values for status_val values
            if(results.info.status_val == 1 or results.info.status_val == 2):
                u = results.x
                # print("\nresulting controller: " + str(u))
            else:
                print("\nstatus_val did NOT RETURN 1 OR 2")
                u = np.zeros(3)

        vel_msg.linear.x = u[0]
        vel_msg.linear.y = u[1]
        vel_msg.linear.z = u[2]

        pub.publish(vel_msg)

    # Debug
    # else:
        # # print("quad_namespace is not in currentObjectStates.name")
        # # print("\n")
        # # print(currentObjectStates.name)
        # # print("\n")
    # /Debug




def nominal_ctrl(state, point, point_deriv):
    global kp, kd, umax
    
    u = kd*point_deriv + kp*(point-state)
    norm_u = np.linalg.norm(u,np.inf)
    if norm_u <= umax:
        return u 
    else:
        return umax * (u / norm_u)

def h(x,xo,R,Ro):
    # x and xo refer to the positional (x,y) state of the agent (x) and obstacle (xo)
    return (np.linalg.norm(x[0:3] - xo[0:3], 2))**2 - (max(R,Ro))**2

def dhdx(x,xo):
    # x and xo refer to the positional (x,y) state of the agent (x) and obstacle (xo)
    return 2*np.array([x[0]-xo[0], x[1]-xo[1], x[2]-xo[2]])

def g(x):
    return np.array([[cos(x[2]), 0], [sin(x[2]), 0], [0,1]])

def determine_theta(quaternion, tolerance=0.01):
    # Determines a (very rough) approximation of theta by projecting the forward direction axis of the agent
    # (assumed to be agent body frame x-axis) onto the ground plane (x-y plane in Gazebo). This operation     
    # can be undefined, so be careful and make sure that your agents never have their forward axis pointing 
    # perpendicular to the ground plane.

    # Tolerance determines how close the x-axis must be to vertical before returning an error. This
    # will need to be improved in future versions.

    # # print("\n input quaternion:")
    # # print(quaternion)

    # Quaternion must be either numpy vector or geometry_msgs/Quaternion message
    if type(quaternion) is Quaternion:
        rotation_quaternion = np.array([0.0,0.0,0.0,0.0])
        rotation_quaternion[0] = quaternion.x
        rotation_quaternion[1] = quaternion.y
        rotation_quaternion[2] = quaternion.z
        rotation_quaternion[3] = quaternion.w
    else:
        rotation_quaternion = quaternion

    quat_vector = np.array([1,0,0,0]) # x-axis in local frame
    # Perform the quaternion rotation qvq^-1
    quat_vector = trans.quaternion_multiply(rotation_quaternion, quat_vector)
    quat_vector = trans.quaternion_multiply(quat_vector, trans.quaternion_conjugate(rotation_quaternion))

    # Project resulting vector onto the x-y plane and normalize
    two_dim_vec = np.array([quat_vector[0], quat_vector[1]])
    if np.linalg.norm(two_dim_vec) < tolerance:
        # Debug
        print("\ntwo_dim_vec value: " + str(two_dim_vec) + "\n")
        # /Debug
        print('Cannot determine theta: x-vector is too close to vertical. Check model poses or change the tolerance.')
    
    # Determine theta as angle between two_dim_vector and x-axis of global frame
    # If two_dim_vec is zero, return an error...TODO
    abs_theta = arccos(two_dim_vec.dot(np.array([1,0]))/np.linalg.norm(two_dim_vec)) 
    if (two_dim_vec[1] >= 0):
        return abs_theta
    else:
        return -abs_theta


def formation_offset(formation_state, deriv_formation_state, offset_vector):
    # Calculates an agent's desired formational position as an offset from the center of formation

    # This assumes that there exists a formational frame defined by:
    #   * A point acting as the center of formation
    #   * A directional vector acting as the x axis of the frame
    # For now, the formational frame xy plane is assumed to be parallel to the flat ground xy plane.
    # In addition, addition, the offset vector is assumed to not be time-varying.
    #
    # Inputs:
    #
    # formation_state:          The state of the formation. A numpy array with the form [xc, yc, zc, phi] where
    #                           (xc,yc,zc) are the coordinates of the center of formation point and phi is the
    #                           rotational angle (about the global z-axis) from the global x-axis to the 
    #                           formational frame x axis.
    #
    # deriv_formation_state:    The time derivative of formation_state. A numpy vector with the form
    #                           [dxc, dyc, dzc, dphi], where d represents the time derivative.
    #
    # offset_vector:            The offset vector from the formational center resolved in the formational frame.
    #                           A numpy vector of the form [x, y, z]
    # 
    # Outputs:
    #
    # output_point:             A numpy vector containing the formational offset point resolved in the global
    #                           frame. 
    #
    # deriv_output_point:       A numpy vector containing the time derivative of output_point
    #
    # output_velocity: A numpy vector containing the velocity of the offset point
    
    phi = formation_state[3]
    rotation_matrix = np.array([[cos(phi), -sin(phi), 0],[sin(phi), cos(phi), 0],[0, 0, 1]])
    output_point = rotation_matrix.dot(offset_vector) + formation_state[0:3] 

    dphi = deriv_formation_state[3]
    deriv_rotation_matrix = dphi*np.array([[-sin(phi), -cos(phi), 0],[cos(phi), -sin(phi), 0], [0, 0, 1]])
    deriv_output_point = deriv_rotation_matrix.dot(offset_vector) + deriv_formation_state[0:3]

    return (output_point, deriv_output_point)
    


def object_callback(msg):
    # Updates the global obstacleStates
    # Using globals is terrible programming practice and needs to be changed later.
    global objectStates
    objectStates = deepcopy(msg)
   
   

## Calls main loop

if __name__ == '__main__':
    # Takes inputs from command line. 
    # Note that any unexpected inputs passed into argparse will throw an error.

    # rospy.myargv removes ROS custom inputs from the argv vector
    myargv = rospy.myargv(argv=sys.argv)

    # Removes the filename from the arguments. Required when manually passing the array into the parse_args() function.
    myargv = myargv[1:]     
   
    # DEBUG
    # print(myargv)
    rospy.loginfo(myargv)
    # raw_input("Press ENTER to continue...")
    # /DEBUG
    
    parser = argparse.ArgumentParser(description='IO_controller_quad : Node containing the QP controller for the Hector Quadrotors.')
    parser.add_argument('--quad_namespace', help="The namespace of the quad; i.e. quad0.")
    parser.add_argument('--formation_x', type=float, help='The local formational x-axis offset of the agent in the formation frame.')
    parser.add_argument('--formation_y', type=float, help='The local formational y-axis offset of the agent in the formation frame.')
    parser.add_argument('--formation_z', type=float, help='The local formational z-axis offset of the agent in the formation frame.')
    parser.add_argument('--instant_start', action="store_true", help='Starts the trajectory immediately upon the node launching.')
    args = parser.parse_args(myargv)
    
    if args.quad_namespace is not None:
        quad_namespace = args.quad_namespace
        # print("The quad namespace is " + quad_namespace)
    else:
        quad_namespace = 'quad0'

    if args.formation_x is not None:
        local_offset[0] = args.formation_x

    if args.formation_y is not None:
        local_offset[1] = args.formation_y

    if args.formation_z is not None:
        local_offset[2] = args.formation_z

    # if args.instant_start:
    #     t0 = rospy.get_rostime()

    # TODO: Find the publisher topic
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=1) # Double check to make sure this has correct namespace later

    rospy.wait_for_service('enable_motors', timeout=30)
    enable_motors = rospy.ServiceProxy('enable_motors', EnableMotors)
    response = enable_motors(True)
    if response.success:
        try:
            quad_qp_control()
        except rospy.ROSInterruptException: pass
    else:
        print("Something went wrong with calling 'enable_motors' service for quadrotor" + quad_namespace)
